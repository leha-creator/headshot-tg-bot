import {composeWizardScene} from "../helpers/scene.servise";
import {model} from 'mongoose';
import {ConfigService} from "../config/configService";
import {HelpMessageSchema} from "../Models/HelpMessage.model";
import {escapeText} from "../helpers/domain.service";
import {UserSchema} from "../Models/User.model";

const configService = ConfigService.getInstance();

export const helpScene = composeWizardScene(
    async (ctx) => {
        ctx.wizard.state.address = ctx.wizard.state.address ?? null;
        if (!ctx.wizard.state.address) {
            ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', {
                reply_markup: {
                    keyboard: [
                        [{text: "–õ–∏–≤–∞–Ω–æ–≤–∞"}, {text: "–ì–æ–Ω—á–∞—Ä–æ–≤–∞"}],
                        [{text: "–†—è–±–∏–∫–æ–≤–∞"}, {text: "40 –ª–µ—Ç–∏—è –ø–æ–±–µ–¥—ã"}],
                        [{text: "–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥ –õ–µ–Ω–∏–Ω–∞"}],
                    ]
                },
            });
        } else {
            return ctx.wizard.steps[1](ctx);
        }

        return ctx.wizard.next();
    },
    async (ctx) => {
        console.log(ctx.wizard.state.address);
        if (!ctx.wizard.state.address && (ctx.message == undefined || ctx.message.text == undefined)) {
            return ctx.wizard.steps[0](ctx);
        } else if (!ctx.wizard.state.address) {
            ctx.wizard.state.address = ctx.message.text;
        }

        ctx.reply('–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è');
        return ctx.wizard.next();
    },
    async (ctx: any, done: any) => {
        if (typeof ctx.message !== 'undefined' && ctx.message.text !== undefined && ctx.wizard.state.address) {
            const User = model("User", UserSchema);
            const user = await User.findOne({chat_id: ctx.message.chat.id});
            if (user) {
                const phone = user.phone == undefined ? '–ù–µ —É–∫–∞–∑–∞–Ω' : escapeText(user.phone.toString());
                const text = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ` + user.name + `\nüìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ` + phone +  `\nüè¢ –ö–ª—É–±: ` + escapeText(ctx.wizard.state.address) + `\nüìù –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: ` + escapeText(ctx.message.text)
                ctx.telegram.sendMessage(configService.get('HEADSHOT_HELP_GROUP_ID'), text).then((textMessage: any) => {
                    const HelpMessage = model("HelpMessage", HelpMessageSchema);
                    HelpMessage.create({
                        chat_id: ctx.message.chat.id,
                        original_message_id: ctx.message.message_id,
                        message_id: textMessage.message_id,
                        address: ctx.wizard.state.address
                    });
                });
            }
        } else {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
        }

        return done();
    },
);