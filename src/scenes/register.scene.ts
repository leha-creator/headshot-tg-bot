import {composeWizardScene} from "../helpers/scene.servise";
import {IUser, UserSchema} from "../Models/User.model";
import {model} from 'mongoose';
import crypto from 'crypto'
import {escapeText} from "../helpers/domain.service";
import {logger} from "../helpers/logger";
import {AdminService, USER_BONUS_QUANTITY, USER_JOIN_BY_REF_BONUS_QUANTITY} from "../helpers/admin.service";
import {ConfigService} from "../config/configService";
const configService = ConfigService.getInstance();

export const registerScene = composeWizardScene(
    async (ctx) => {
        ctx.wizard.state.phone = null;
        let ref_user_name = '';
        const ref_user_code = ctx.session.ref_code;
        if (ref_user_code !== undefined) {
            const User = model("User", UserSchema);
            const ref_user = await User.findOne({ref_code: ref_user_code});
            if (ref_user && ref_user.ref_code !== undefined) {
                ref_user_name = ref_user.name;
            }
        }
        const ref_code = crypto.webcrypto.getRandomValues(new Uint32Array(1)).toString();
        await updateOrInsert({
            chat_id: ctx.message.chat.id,
            name: ctx.message.from.username,
            ref_code: ref_code,
            city: undefined,
            join_code: ref_user_code,
            is_bonus_accrued: false,
            is_subscribed: false
        });

        try {
            let message = '–•—ç–π, –≥–µ–π–º–µ—Ä\\! üëã –Ø –±–æ—Ç [HEADSHOT]((https://t.me/headshot_cyber)\\. –†–µ–≥–∞–π—Å—è, –∏ –±–æ–Ω—É—Å —Ç–≤–æ–π\\! üí∞ –ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É üëá';
            if (ref_user_name) {
                message = '–ü—Ä–∏–≤–µ—Ç\\! –í–∞—à –¥—Ä—É–≥ ' + escapeText('@' + ref_user_name) + ' –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ [HEADSHOT]((https://t.me/headshot_cyber), –∏ —ç—Ç–æ –∫—Ä—É—Ç–æ\\! üéâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å \\+ –µ—â–µ ' + (USER_JOIN_BY_REF_BONUS_QUANTITY - USER_BONUS_QUANTITY) + ' –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç\\! üëá';
            }
            ctx.reply(message, {
                reply_markup: {
                    keyboard: [
                        [
                            {
                                text: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                                callback_data: 'enter_register',
                                request_contact: true,
                            },
                        ],
                    ],
                },
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
            });
        } catch (e: any) {
            logger.info(e.message);
        }

        return ctx.wizard.next();
    },
    async (ctx: any) => {
        if (typeof ctx.message !== 'undefined' && typeof ctx.message.contact !== 'undefined') {
            if (ctx.message.contact.phone_number) {
                ctx.wizard.state.phone = ctx.message.contact.phone_number;
                ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{text: "–£–ª—å—è–Ω–æ–≤—Å–∫", callback_data: "–£–ª—å—è–Ω–æ–≤—Å–∫"}],
                            [{text: "–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥", callback_data: "–î–∏–º–∏—Ç—Ä–æ–≤–≥—Ä–∞–¥"}],
                        ]
                    }
                });
            }
        } else {
            ctx.reply('–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
                reply_markup: {
                    keyboard: [
                        [
                            {
                                text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                                request_contact: true,
                            },
                        ],
                    ],
                },
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
            });

            return ctx.wizard.steps[0](ctx);
        }

        return ctx.wizard.next();
    },
    async (ctx: any, done: () => any) => {
        if (typeof ctx.update.callback_query !== 'undefined') {
            console.log(ctx.update.callback_query.message.from);
            if (ctx.wizard.state.phone) {
                const ref_code = crypto.webcrypto.getRandomValues(new Uint32Array(1)).toString();
                await updateOrInsert({
                    phone: ctx.wizard.state.phone,
                    chat_id: ctx.update.callback_query.from.id,
                    name: ctx.update.callback_query.from.username,
                    city: ctx.update.callback_query.data,
                    ref_code,
                    is_bonus_accrued: false,
                    is_subscribed: false,
                });

                const chat_id = ctx.update.callback_query.from.id;
                const User = model("User", UserSchema);
                const user = await User.findOne({chat_id: chat_id});
                if (user) {
                    const chat_member = await ctx.telegram.getChatMember(configService.get('HEADSHOT_CHANNEL_ID'), chat_id);
                    if (chat_member.status == 'member') {
                        const ref_user = await User.findOne({ref_code: user.join_code});
                        user.is_subscribed = true;
                        await updateOrInsert(user);
                        ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –º—ã –≤—ã—à–ª–µ–º –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞.');
                        AdminService.sendMessagesToAdminOnSubscribe(user, ref_user, ctx);
                        return done();
                    }
                }
            }
        } else {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', {
                reply_markup: {
                    keyboard: [
                        [
                            {
                                text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑",
                                request_contact: true,
                            },
                        ],
                    ],
                },
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
            });

            return ctx.wizard.steps[0](ctx);
        }

        ctx.reply('–û—Ç–ª–∏—á–Ω–æ\\! –í–∞—à –±–æ–Ω—É—Å –∂–¥–µ—Ç –≤–∞—Å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à [–∫–∞–Ω–∞–ª](https://t.me/headshot_cyber) —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –∏–≥—Ä–æ–≤—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏\\!', {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–ü–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: 'https://t.me/headshot_cyber'}],
                    [{text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data: "check"}],
                ]
            },
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true,
        });

        ctx.wizard.next();
        return done();
    },
);

async function updateOrInsert(user_data: IUser) {
    const User = model("User", UserSchema);
    const user = await User.findOne({chat_id: user_data.chat_id});
    if (user) {
        await user.updateOne(user_data);
    } else {
        await User.create(user_data);
    }
}