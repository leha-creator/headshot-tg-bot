import {composeWizardScene} from "../helpers/scene.servise";
import {IUser, UserSchema} from "../Models/User.model";
import {model} from 'mongoose';
import crypto from 'crypto'
import {escapeText} from "../helpers/domain.service";
import {logger} from "../helpers/logger";
import {MessageSchema} from "../Models/Message.model";

export const registerScene = composeWizardScene(
    async (ctx) => {
        let join_code = '';
        let ref_user_name = '';
        const ref_user_code = ctx.session.ref_code;
        if (ref_user_code !== undefined) {
            const User = model("User", UserSchema);
            const ref_user = await User.findOne({ref_code: ref_user_code});
            if (ref_user && ref_user.ref_code !== undefined) {
                join_code = ref_user.ref_code;
                ref_user_name = ref_user.name;
            }
        }
        const ref_code = crypto.webcrypto.getRandomValues(new Uint32Array(1)).toString();

        await updateOrInsert({
            chat_id: ctx.message.chat.id,
            name: ctx.message.from.username,
            ref_code: ref_code,
            join_code: join_code
        });

        try {
            let message = '–•—ç–π, –≥–µ–π–º–µ—Ä\\! üëã –Ø –±–æ—Ç [HEADSHOT]((https://t.me/headshot_cyber)\\. –†–µ–≥–∞–π—Å—è, –∏ –±–æ–Ω—É—Å —Ç–≤–æ–π\\! üí∞ –ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É üëá';
            if (ref_user_name) {
                message = '–ü—Ä–∏–≤–µ—Ç\\! –í–∞—à –¥—Ä—É–≥ ' + escapeText('@' + ref_user_name) + ' –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤–∞—Å –≤ [HEADSHOT]((https://t.me/headshot_cyber), –∏ —ç—Ç–æ –∫—Ä—É—Ç–æ\\! üéâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å \\+ –µ—â–µ 100 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç\\! üëá';
            }
            ctx.reply(message, {
                reply_markup: {
                    keyboard: [
                        [
                            {
                                text: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                                callback_data: 'enter_register',
                                request_contact: true,
                            },
                        ],
                    ],
                },
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
            });
        } catch (e: any) {
            logger.info(e.message);
        }
        return ctx.wizard.next();
    },
    async (ctx: any, done: () => any) => {
        if (typeof ctx.message !== 'undefined' && typeof ctx.message.contact !== 'undefined') {
            if (ctx.message.contact.phone_number) {
                const ref_code = crypto.webcrypto.getRandomValues(new Uint32Array(1)).toString();
                await updateOrInsert({
                    phone: ctx.message.contact.phone_number,
                    chat_id: ctx.message.chat.id,
                    name: ctx.message.from.username,
                    ref_code,
                });

                const chat_id = ctx.message.chat.id;
                const User = model("User", UserSchema);
                const user = await User.findOne({chat_id: chat_id});
                if (user) {
                    const chat_member = await ctx.telegram.getChatMember(-1001634058732, chat_id);
                    if (chat_member.status == 'member') {
                        const User = model("User", UserSchema);
                        const ref_user = await User.findOne({ref_code: user.join_code});
                        ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! 300 —Ä—É–±–ª–µ–π —Å–∫–æ—Ä–æ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –µ—â–µ 300 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π, –∞ –≤–∞—à –¥—Ä—É–≥ ‚Äî 100‚ÇΩ! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/headshot_club_bot?start=` + user.ref_code);
                        if (ref_user && ref_user.ref_code !== undefined) {
                            ctx.telegram.sendMessage(ref_user.chat_id, '–£—Ä–∞! üéâ –í–∞—à –¥—Ä—É–≥ @' + user.name + ' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! 300 —Ä—É–±–ª–µ–π —Å–∫–æ—Ä–æ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç! üí∞');
                        }

                        let message = "‚ùóÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n" +
                            "\n" +
                            "–ù–æ–º–µ—Ä: " + user.phone + "\n" +
                            "ID: @" + user.name + "\n" +
                            "–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–æ–≤: 300\n";
                        let balance = 300;
                        if (ref_user && ref_user.ref_code !== undefined) {
                            message = "‚ùóÔ∏è–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é:\n" +
                                "\n" +
                                "–ù–æ–º–µ—Ä: " + user.phone + "\n" +
                                "ID: @" + user.name + "\n" +
                                "–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–æ–≤: 450\n";
                            balance = 450;
                            const admin_message = "‚ùó –ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n" +
                                "–ù–æ–º–µ—Ä: " + ref_user.phone + "\n" +
                                "ID: @" + ref_user.name + "\n" +
                                "–ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å–æ–≤: 150\n";
                            ctx.telegram.sendMessage(-4610945060, admin_message, {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            {
                                                text: "‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ",
                                                callback_data: 'bonuses_accrued',
                                            },
                                        ],
                                    ],
                                },
                            }).then((textMessage: any) => {
                                const Message = model("Message", MessageSchema);
                                Message.create({chat_id: ref_user.chat_id, message_id: textMessage.message_id, balance: 150});
                            });
                        }
                        ctx.telegram.sendMessage(-4610945060, message, {
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {
                                            text: "‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ",
                                            callback_data: 'bonuses_accrued',
                                        },
                                    ],
                                ],
                            },
                        }).then((textMessage: any) => {
                            const Message = model("Message", MessageSchema);
                            Message.create({chat_id: chat_id, message_id: textMessage.message_id, balance: balance});
                        });
                        return done();
                    }
                }
            }
        } else {
            ctx.reply('–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
                reply_markup: {
                    keyboard: [
                        [
                            {
                                text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                                request_contact: true,
                            },
                        ],
                    ],
                },
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
            });

            return ctx.wizard.steps[0](ctx);
        }

        ctx.reply('–û—Ç–ª–∏—á–Ω–æ\\! –í–∞—à –±–æ–Ω—É—Å –∂–¥–µ—Ç –≤–∞—Å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à [–∫–∞–Ω–∞–ª](https://t.me/headshot_cyber) —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏ –∏ –∏–≥—Ä–æ–≤—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏\\!', {
            reply_markup: {
                inline_keyboard: [
                    [{text: "–ü–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url: 'https://t.me/headshot_cyber'}],
                    [{text: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data: "check"}],
                ]
            },
            parse_mode: 'MarkdownV2',
            disable_web_page_preview: true,
        });

        ctx.wizard.next();
        return done();
    },
);

async function updateOrInsert(user_data: IUser) {
    const User = model("User", UserSchema);
    const user = await User.findOne({chat_id: user_data.chat_id});
    if (user) {
        await user.updateOne(user_data);
    } else {
        await User.create(user_data);
    }
}