import {Telegraf} from "telegraf";
import {IBotContext} from "../context/context.interface";
import {AdminService} from "../helpers/admin.service";
import {model} from "mongoose";
import {UserSchema} from "../Models/User.model";
import {MessageSchema} from "../Models/Message.model";
import {Action} from "./action.class";

export class BonusAccruedAction extends Action {
    constructor(bot: Telegraf<IBotContext>) {
        super(bot);
    }

    handle(): void {
        this.bot.action('bonuses_accrued', async (ctx: any) => {
            const Message = model("Message", MessageSchema);
            const message = await Message.findOne({message_id: ctx.update.callback_query.message.message_id});
            if (message && message.chat_id !== undefined) {
                const User = model("User", UserSchema);
                if (message.is_referral_message == true) {
                    const user = await User.findOne({chat_id: message.referral_chat_id});
                    if (user) {
                        user.is_bonus_accrued = true;
                        ctx.telegram.sendMessage(user.chat_id, `üéâ –í–∞–º —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª–∏ ${message.balance} –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π!`);
                        await user.updateOne(user);
                        await AdminService.setMessageProcessed(message.message_id, true);
                        await this.bot.telegram.editMessageText(ctx.chat.id, ctx.update.callback_query.message.message_id, undefined, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ' + user.phone + ' –∑–∞—á–∏—Å–ª–µ–Ω–æ ' + message.balance + ' –±–æ–Ω—É—Å–æ–≤ ‚úÖ');
                    }
                } else {
                    const user = await User.findOne({chat_id: message.chat_id});
                    if (user) {
                        const ref_user = await User.findOne({ref_code: user.join_code});
                        if (ref_user && ref_user.ref_code !== undefined) {
                            ctx.telegram.sendMessage(ref_user.chat_id, '–£—Ä–∞! üéâ –í–∞—à –¥—Ä—É–≥ @' + user.name + ' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! 150 —Ä—É–±–ª–µ–π —Å–∫–æ—Ä–æ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç! üí∞');
                        }

                        user.is_bonus_accrued = true;
                        await user.updateOne(user);

                        await AdminService.setMessageProcessed(message.message_id, true);
                        ctx.telegram.sendMessage(user.chat_id, `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å! ${message.balance} —Ä—É–±–ª–µ–π —Å–∫–æ—Ä–æ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ–±–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ 150 –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π! –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/headshot_club_bot?start=` + user.ref_code);
                        await this.bot.telegram.editMessageText(ctx.chat.id, ctx.update.callback_query.message.message_id, undefined, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ' + user.phone + ' –∑–∞—á–∏—Å–ª–µ–Ω–æ ' + message.balance + ' –±–æ–Ω—É—Å–æ–≤ ‚úÖ');
                    }
                }

            }
        });
    }
}

